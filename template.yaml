apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: dotnet-feature-api-v1.0 # Remember to also change templateName
  title: .NET 6.0 Feature API v1.0
  description: Create a .NET 6.0 Feature API
  tags:
    - service
    - template
    - feature-api
spec:
  owner: Team Platform
  type: api
  parameters:
    - title: Name and owner
      required:
        - name
        - description
        - owner
        - organization
      properties:
        name:
          title: Name
          type: string
          pattern: ^[A-Z][a-zA-Z0-9]+$
          description: Unique name of the Feature API. Must be PascalCase. First character must be [A-Z], other chars alphanumerical.
          minLength: 5
          maxLength: 30
          ui:autoFocus: true
        description:
          title: Description
          type: string
          description: Description of the Feature API.
          minLength: 5
          maxLength: 300
          ui:options:
            rows: 3
          ui:widget: textarea
        owner:
          title: Owner
          type: string
          description: Owner of the package
          default: pascalhaakmat # Can be changed to your username for local development
          ui:field: OwnerPicker
          ui:widget: select
          ui:options:
            allowedKinds:
              - Group
        organization:
          title: GitHub organization
          description: The organization / owner in GitHub
          type: string
          default: phaakmat # fundarealestate # Can be changed to develop/test against dev/test repo
          ui:widget: hidden
    - title: X
      description: X.description
      properties:
        httpApi:
          title: HTTP API
          description: "'[.NET 6 Minimal API Endpoints](http://www.google.com)' provides a simpler, lightweight alternative to the tried and true 'MVC Controllers'."
          type: string
          oneOf:
            - const: ".NET 6 Minimal API Endpoints"
            - const: "MVC Controllers"
          default: .NET 6 Minimal API Endpoints
        cosmosDb:
          title: properties.cosmosDb title
          description: properties.cosmosDb description
          type: string
          oneOf:
            - const: ""
              title: "No"
            - const: "Yes"
              description: "'Yes' includes package references and sample code for the Cosmos DB client. Leave blank to omit these references and samples."
      dependencies:
        cosmosDb:
          properties:
            cosmosDbRepository:
              title: Add CosmosDB Sample Repository
              type: boolean

    - title: Features
      description: Description of Features
      properties:
        features:
          title: Select services
          description: Select services description
          ui:order:
            - httpApi
            - cosmosDb
            - cosmosDbRepository
            - sqlServer
            - entityFramework
            - entityFrameworkRepository
            - fundaMessaging
          properties:
            httpApi:
              title: HTTP API
              type: string
              enum:
                - .NET 6 Minimal API Endpoints
                - MVC Controllers
              description: "'.NET 6 Minimal API Endpoints' provides a simpler, lightweight alternative to the tried and true 'MVC Controllers'."
              default: .NET 6 Minimal API Endpoints
            fundaMessaging:
              title: Add Funda.Extensions.Messaging
              type: boolean
              description: "Whether to include Funda.Extensions.Messaging."
            cosmosDb:
              title: CosmosDB
              type: string
              oneOf:
                - const: ""
                  title: "No"
                - const: "Yes"
              description: "'Yes' includes package references and sample code for the Cosmos DB client. Leave blank to omit these references and samples."
            sqlServer:
              title: Add SQL Server
              type: boolean
              description: Whether to include SQL Server client.
            entityFramework:
              title: Entity Framework Core
              type: string
              oneOf:
                - const: ""
                  title: "No"
                - const: "Entity Framework Core"
                - const: "Entity Framework Core with CosmosDB"
                - const: "Entity Framework Core with SqlServer"
              description: "'Entity Framework Core' includes package references and sample code. The 'with ...' options add a DbContext for that data store."
              default: No
          dependencies:
            cosmosDb:
              properties:
                cosmosDbRepository:
                  title: Add CosmosDB Sample Repository
                  type: boolean
            entityFramework:
              properties:
                entityFrameworkRepository:
                  title: Add Entity Framework Core Sample Repository
                  type: boolean


  # scaffolding steps
  steps:
    - id: fetch-base
      name: Fetch Template
      action: fetch:template
      input:
        url: './template'
        values:
          templateName: dotnet-feature-api-v1.0 # From metadata.name
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          repoName: 'Funda.${{ parameters.name }}'
          namespacePrefix: 'Funda.${{ parameters.name }}'
          fileNamePrefix: 'Funda.${{ parameters.name }}'
          dirNamePrefix: 'Funda.${{ parameters.name }}'
          applicationName: 'Funda.${{ parameters.name }}'
          enableControllers: ${{ parameters.features.httpApi == 'MVC Controllers' }}
          enableEndpoints: ${{ parameters.features.httpApi == '.NET 6 Minimal API Endpoints' }}
          enableFundaMessaging: ${{ parameters.features.fundaMessaging }}
          enableCosmosDb: ${{ parameters.features.cosmosDb }}
          enableCosmosDbRepository: ${{ parameters.features.cosmosDbRepository }}
          enableEntityFramework: ${{ parameters.features.entityFramework != 'No' }}
          enableEntityFrameworkCosmosDb: ${{ parameters.features.entityFramework == 'Entity Framework Core with CosmosDB' }}
          enableEntityFrameworkSqlServer: ${{ parameters.features.entityFramework == 'Entity Framework Core with SqlServer' }}
          enableEntityFrameworkRepository: ${{ parameters.features.entityFrameworkRepository }}
          enableInMemoryRepository: true

    - id: remove-controllers
      name: Remove Controllers
      action: fs:delete
      if: ${{ not parameters.features.mvcControllers }}
      input:
        files:
          - src/Funda.${{ parameters.name }}/Controllers

    - id: remove-endpoints
      name: Remove Endpoints
      action: fs:delete
      if: ${{ not parameters.features.endpoints }}
      input:
        files:
          - src/Funda.${{ parameters.name }}/Endpoints

    - id: remove-funda-messaging
      name: Remove Funda.Messaging
      action: fs:delete
      if: ${{ not parameters.features.fundaMessaging }}
      input:
        files:
          - src/Funda.${{ parameters.name }}/Messaging
          
    - id: setup-sqlserver
      name: Remove SQL Server
      action: fs:delete
      if: ${{ not parameters.features.sqlServer }}
      input:
        files:
          - src/Funda.${{ parameters.name }}.Infrastructure/SqlServer

    - id: remove-cosmosdb
      name: Remove CosmosDB
      action: fs:delete
      if: ${{ not parameters.features.cosmosDb }}
      input:
        files:
          - src/Funda.${{ parameters.name }}.Infrastructure/CosmosDb

    - id: remove-in-memory-repository
      name: Remove In Memory repository
      action: fs:delete
      if: ${{ parameters.features.entityFramework != 'No' }}
      input:
        files:
          - src/Funda.${{ parameters.name }}.Infrastructure/InMemory

    - id: remove-ef
      name: Remove EF Core
      action: fs:delete
      if: ${{ parameters.features.entityFramework == 'No' }}
      input:
        files:
          - src/Funda.${{ parameters.name }}.Infrastructure/EntityFramework

    - id: remove-ef-cosmos
      name: Remove EF Core CosmosDb
      action: fs:delete
      if: ${{ parameters.features.entityFramework != 'Entity Framework Core with CosmosDB' }}
      input:
        files:
          - src/Funda.${{ parameters.name }}.Infrastructure/EntityFramework/CosmosDb

    - id: remove-ef-sqlserver
      name: Remove EF Core SqlServer
      action: fs:delete
      if: ${{ parameters.features.entityFramework != 'Entity Framework Core with SqlServer' }}
      input:
        files:
          - src/Funda.${{ parameters.name }}.Infrastructure/EntityFramework/SqlServer

    - id: publish
      name: Create GitHub Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        defaultBranch: main
        description: ${{ parameters.description }}
        repoUrl: 'github.com?owner=${{ parameters.organization }}&repo=Funda.${{ parameters.name }}'

    - id: azdevops
      name: Create Azure DevOps Pipeline
      action: azdevops-pipeline-creator
      input:
        owner: ${{ parameters.owner }}
        name: 'Funda.${{ parameters.name }}'

    - id: updateCatalogInfo
      name: Update Catalog Entity Descriptor
      action: catalog:write
      input:
        entity:
          $yaml: template/catalog-info.yaml

    - id: makepr
      name: Create GitHub Pull Request
      action: publish:github:pull-request
      input:
        description: ${{ parameters.description }}
        repoUrl: 'github.com?owner=${{ parameters.organization }}&repo=Funda.${{ parameters.name }}'
        branchName: catalog-info
        title: "Update catalog-info.yaml"

    - id: register
      name: Register with Software Catalog
      action: catalog:register
      input:
        catalogInfoUrl: '${{ steps.publish.output.repoContentsUrl }}/catalog-info.yaml'

  # outputs
  output:
    links:
      - title: Approve PR for Catalog Entity Descriptor
        url: ${{ steps.makepr.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
