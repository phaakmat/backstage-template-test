apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: dotnet-feature-api-v1
  title: .NET 6.0 Feature API v1.1
  description: Create a .NET 6.0 Feature API
  tags:
    - service
    - template
    - feature-api
spec:
  owner: Team Platform
  type: api
  parameters:
    - title: Enter values
      required:
        - name
        - description
        - owner
        - organization
      properties:
        name:
          title: Name
          type: string
          pattern: ^[A-Z][a-zA-Z0-9]+$
          description: Unique name of the Feature API. Must be PascalCase. First character must be [A-Z], other chars alphanumerical.
          minLength: 5
          maxLength: 30
          ui:autoFocus: true
        description:
          title: Description
          type: string
          description: Description of the Feature API.
          minLength: 5
          maxLength: 300
          ui:options:
            rows: 3
          ui:widget: textarea
        owner:
          title: Owner
          type: string
          description: Owner of the package
          default: pascalhaakmat
          ui:field: OwnerPicker
          ui:widget: select
          ui:options:
            allowedKinds:
              - Group
        organization:
          title: GitHub organization
          description: The organization / owner in GitHub
          type: string
          default: phaakmat # fundarealestate
          ui:widget: hidden
    - title: Features
      properties:
        enableEndpoints:
          title: Use .NET 6 Endpoints
          description: Whether to use endpoints
          type: boolean
        enableMvcControllers:
          title: Add MVC Controllers
          type: boolean
          descriptionn: Whether to include support for MVC Controllers.
        enableFundaMessaging:
          title: Add Funda.Extensions.Messaging
          type: boolean
          description: Whether to include Funda.Extensions.Messaging template
        enableCosmosDb:
          title: Add CosmosDB
          type: boolean
          description: Whether to include CosmosDB template.
        enableSqlServer:
          title: Add SQL Server
          type: boolean
          description: Whether to include SQL Server client.
        entityFramework:
          type: string
          enum:
            - No
            - Entity Framework Core
            - Entity Framework Core with CosmosDB
            - Entity Framework Core with SqlServer
          title: Entity Framework Core
          description: Whether to include EF Core and a database provider
          default: No
          # type: object
          # properties:
          #   enabled:
          #     type: boolean
          #     title: Enable EntityFramework
          # dependencies:
          #   entityFrameworkEnabled:
          #     properties:
          #       cosmosDbEnabled:
          #         type: boolean
          #         default: false
          #       sqlServerEnabled:
          #         type: boolean
          #         default: false                  

  # scaffolding steps
  steps:
    - id: fetch-base
      name: Fetch Template
      action: fetch:template
      input:
        url: './template'
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          repoName: 'Funda.${{ parameters.name }}'
          namespacePrefix: 'Funda.${{ parameters.name }}'
          fileNamePrefix: 'Funda.${{ parameters.name }}'
          dirNamePrefix: 'Funda.${{ parameters.name }}'
          applicationName: 'Funda.${{ parameters.name }}'
          enableControllers: ${{ parameters.enableControllers }}
          enableEndpoints: ${{ parameters.enableEndpoints }}
          enableFundaMessaging: ${{ parameters.enableFundaMessaging }}
          enableCosmosDb: ${{ parameters.enableCosmosDb }}
          enableEntityFramework: ${{ parameters.entityFramework != 'No' }}
          enableEntityFrameworkCosmosDb: ${{ parameters.entityFramework == 'Entity Framework Core with CosmosDB' }}
          enableEntityFrameworkSqlServer: ${{ parameters.entityFramework == 'Entity Framework Core with SqlServer' }}
        
    - id: setup-controllers
      name: Configure template
      action: fs:delete
      if: ${{ not parameters.enableControllers }}
      input:
        files:
          - template/src/Funda.${{ parameters.name }}/Controllers
          
    - id: setup-endpoints
      name: Configure template
      action: fs:delete
      if: ${{ not parameters.enableEndpoints }}
      input:
        files:
          - template/src/Funda.${{ parameters.name }}/Endpoints
          
    - id: setup-sqlserver
      name: Configure template
      action: fs:delete
      if: ${{ not parameters.enableSqlServer }}
      input:
        files:
          - template/src/Funda.${{ parameters.name }}.Infrastructure/SqlServer

    - id: setup-cosmosdb
      name: Configure template
      action: fs:delete
      if: ${{ not parameters.enableCosmosDb }}
      input:
        files:
          - template/src/Funda.${{ parameters.name }}.Infrastructure/CosmosDb

    - id: setup-ef
      name: Configure template
      action: fs:delete
      if: ${{ not parameters.enableEntityFramework }}
      input:
        files:
          - template/src/Funda.${{ parameters.name }}.Infrastructure/EntityFramework

    - id: setup-ef-cosmos
      name: Configure template
      action: fs:delete
      if: ${{ not parameters.enableEntityFrameworkCosmosDb }}
      input:
        files:
          - template/src/Funda.${{ parameters.name }}.Infrastructure/EntityFramework/CosmosDb

    - id: setup-ef-sqlserver
      name: Configure template
      action: fs:delete
      if: ${{ not parameters.enableEntityFrameworkSqlServer }}
      input:
        files:
          - template/src/Funda.${{ parameters.name }}.Infrastructure/EntityFramework/SqlServer

    - id: publish
      name: Create GitHub Repository
      action: publish:github
      input:
        allowedHosts: ['github.com']
        defaultBranch: main
        description: ${{ parameters.description }}
        repoUrl: 'github.com?owner=${{ parameters.organization }}&repo=Funda.${{ parameters.name }}'

    - id: azdevops
      name: Create Azure DevOps Pipeline
      action: azdevops-pipeline-creator
      input:
        owner: ${{ parameters.owner }}
        name: 'Funda.${{ parameters.name }}'

    - id: updateCatalogInfo
      name: Update Catalog Entity Descriptor
      action: catalog:write
      input:
        entity:
          $yaml: template/catalog-info.yaml

    - id: makepr
      name: Create GitHub Pull Request
      action: publish:github:pull-request
      input:
        description: ${{ parameters.description }}
        repoUrl: 'github.com?owner=${{ parameters.organization }}&repo=Funda.${{ parameters.name }}'
        branchName: catalog-info
        title: "Update catalog-info.yaml"

    - id: register
      name: Register with Software Catalog
      action: catalog:register
      input:
        catalogInfoUrl: '${{ steps.publish.output.repoContentsUrl }}/catalog-info.yaml'

  # outputs
  output:
    links:
      - title: Approve PR for Catalog Entity Descriptor
        url: ${{ steps.makepr.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
